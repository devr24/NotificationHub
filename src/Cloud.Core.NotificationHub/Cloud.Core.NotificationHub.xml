<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cloud.Core.NotificationHub</name>
    </assembly>
    <members>
        <member name="T:Cloud.Core.NotificationHub.AppSettings">
            <summary>
            Class App Settings.
            </summary>
        </member>
        <member name="P:Cloud.Core.NotificationHub.AppSettings.SupportedCultures">
            <summary>Gets the supported cultures.</summary>
            <value>The supported cultures.</value>
        </member>
        <member name="P:Cloud.Core.NotificationHub.AppSettings.Cultures">
            <summary>Gets the cultures.</summary>
            <value>The cultures.</value>
        </member>
        <member name="P:Cloud.Core.NotificationHub.AppSettings.MonitorFrequencySeconds">
            <summary>Gets or sets the monitor frequency seconds.</summary>
            <value>The monitor frequency seconds.</value>
        </member>
        <member name="P:Cloud.Core.NotificationHub.AppSettings.DefaultEmailProvider">
            <summary>Gets or sets the default email provider.</summary>
            <value>The default email provider.</value>
        </member>
        <member name="P:Cloud.Core.NotificationHub.AppSettings.DefaultSmsProvider">
            <summary>Gets or sets the default SMS provider.</summary>
            <value>The default SMS provider.</value>
        </member>
        <member name="P:Cloud.Core.NotificationHub.AppSettings.AllowedAttachmentTypesList">
            <summary>Gets the allowed attachment types list.</summary>
            <value>The allowed attachment types list.</value>
        </member>
        <member name="P:Cloud.Core.NotificationHub.AppSettings.AllowedAttachmentTypes">
            <summary>Gets or sets the allowed file types for attachment.</summary>
        </member>
        <member name="T:Cloud.Core.NotificationHub.Controllers.AttachmentController">
            <summary>
            Class EmailController.
            Implements the <see cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="M:Cloud.Core.NotificationHub.Controllers.AttachmentController.#ctor(Cloud.Core.IBlobStorage,Cloud.Core.NotificationHub.AppSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.NotificationHub.Controllers.EmailController"/> class.
            </summary>
            <param name="blobStorage"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Controllers.AttachmentController.GetAttachment(System.Guid)">
            <summary>Retrieve attachment from storage.</summary>
            <param name="id">Id to attachment.</param>
            <returns></returns>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Controllers.AttachmentController.UploadAttachment(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>Add an attachment into the notification hub that can be sent along with notifications.</summary>
            <param name="attachment">The attachment to upload.</param>
        </member>
        <member name="T:Cloud.Core.NotificationHub.Controllers.EmailController">
            <summary>
            Class EmailController.
            Implements the <see cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="M:Cloud.Core.NotificationHub.Controllers.EmailController.#ctor(Cloud.Core.NamedInstanceFactory{Cloud.Core.IEmailProvider},Cloud.Core.NamedInstanceFactory{Cloud.Core.IReactiveMessenger},Cloud.Core.IBlobStorage,Cloud.Core.NotificationHub.AppSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.NotificationHub.Controllers.EmailController" /> class.
            </summary>
            <param name="emailProviders">The email providers.</param>
            <param name="messengers">The messengers.</param>
            <param name="blobStorage">The BLOB storage.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Controllers.EmailController.CreateEmail(Cloud.Core.NotificationHub.Models.DTO.CreateEmail)">
            <summary>Send an email with attachments sychronously.</summary>
            <param name="email">The email to send.</param>
            <returns>Async Task IActionResult.</returns>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Controllers.EmailController.CreateEmailAsync(Cloud.Core.Notification.Events.EmailEvent)">
            <summary>Send an email with attachments sychronously.</summary>
            <param name="email">The email to queue for sending.</param>
            <returns>Async Task IActionResult.</returns>
        </member>
        <member name="T:Cloud.Core.NotificationHub.Controllers.PushController">
            <summary>
            Class Notification Controller.
            Implements the <see cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="M:Cloud.Core.NotificationHub.Controllers.PushController.#ctor(Microsoft.Extensions.Logging.ILogger{Cloud.Core.NotificationHub.Controllers.PushController})">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.NotificationHub.Controllers.PushController"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Controllers.PushController.Post(Cloud.Core.NotificationHub.Models.DTO.CreatePush)">
            <summary>
            Create push notification for all subscribers
            POST api/v1/values
            </summary>
            <returns>IEnumerable&lt;System.String&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">Somethings gone wrong!</exception>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Controllers.PushController.Post(System.String)">
            <summary>
            Subscribe to a push notification - implemented using SignalR.
            POST api/v1/values
            </summary>
            <returns>IEnumerable&lt;System.String&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">Somethings gone wrong!</exception>
        </member>
        <member name="T:Cloud.Core.NotificationHub.Controllers.SmsController">
            <summary>
            Class SmsController.
            Implements the <see cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="M:Cloud.Core.NotificationHub.Controllers.SmsController.#ctor(Cloud.Core.NamedInstanceFactory{Cloud.Core.ISmsProvider},Cloud.Core.NamedInstanceFactory{Cloud.Core.IReactiveMessenger},Cloud.Core.IBlobStorage,Cloud.Core.NotificationHub.AppSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.NotificationHub.Controllers.SmsController" /> class.
            </summary>
            <param name="smsProviders">The SMS providers.</param>
            <param name="messengers">The messengers.</param>
            <param name="blobStorage">The BLOB storage.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Controllers.SmsController.CreateSms(Cloud.Core.NotificationHub.Models.DTO.CreateSms)">
            <summary>Send an sms with attachments sychronously.</summary>
            <param name="sms">The sms to send.</param>
            <returns>Async Task IActionResult.</returns>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Controllers.SmsController.CreateSmsAsync(Cloud.Core.Notification.Events.SmsEvent)">
            <summary>Send an sms with attachments sychronously.</summary>
            <param name="sms">The sms to queue for sending.</param>
            <returns>Async Task IActionResult.</returns>
        </member>
        <member name="T:Cloud.Core.NotificationHub.HostedServices.EmailService">
            <summary>
            Class EmailService.
            Implements the <see cref="T:Microsoft.Extensions.Hosting.IHostedService" />
            </summary>
            <seealso cref="T:Microsoft.Extensions.Hosting.IHostedService" />
        </member>
        <member name="M:Cloud.Core.NotificationHub.HostedServices.EmailService.#ctor(Cloud.Core.NamedInstanceFactory{Cloud.Core.IEmailProvider},Cloud.Core.NamedInstanceFactory{Cloud.Core.IReactiveMessenger},Cloud.Core.ITelemetryLogger,Microsoft.Extensions.Logging.ILogger{Cloud.Core.NotificationHub.HostedServices.EmailService},Cloud.Core.Services.MonitorService,Cloud.Core.IBlobStorage,Cloud.Core.NotificationHub.AppSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.NotificationHub.HostedServices.EmailService" /> class.
            </summary>
            <param name="emailProviders">The email providers.</param>
            <param name="messengers">The messengers.</param>
            <param name="telemetryLogger">The telemetry logger.</param>
            <param name="logger">The logger.</param>
            <param name="monitor">The monitor.</param>
            <param name="blobStorage">The BLOB storage.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cloud.Core.NotificationHub.HostedServices.EmailService.LogBackgroundMetric(System.TimeSpan)">
            <summary>Logs the background metric.</summary>
            <param name="elapsed">The elapsed.</param>
        </member>
        <member name="M:Cloud.Core.NotificationHub.HostedServices.EmailService.StartAsync(System.Threading.CancellationToken)">
            <summary>start as an asynchronous operation.</summary>
            <param name="cancellationToken">Indicates that the start process has been aborted.</param>
        </member>
        <member name="M:Cloud.Core.NotificationHub.HostedServices.EmailService.StopAsync(System.Threading.CancellationToken)">
            <summary>Triggered when the application host is performing a graceful shutdown.</summary>
            <param name="cancellationToken">Indicates that the shutdown process should no longer be graceful.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Cloud.Core.NotificationHub.HostedServices.SmsService">
            <summary>
            Class SmsService.
            Implements the <see cref="T:Microsoft.Extensions.Hosting.IHostedService" />
            </summary>
            <seealso cref="T:Microsoft.Extensions.Hosting.IHostedService" />
        </member>
        <member name="M:Cloud.Core.NotificationHub.HostedServices.SmsService.#ctor(Cloud.Core.NamedInstanceFactory{Cloud.Core.ISmsProvider},Cloud.Core.NamedInstanceFactory{Cloud.Core.IReactiveMessenger},Cloud.Core.ITelemetryLogger,Microsoft.Extensions.Logging.ILogger{Cloud.Core.NotificationHub.HostedServices.SmsService},Cloud.Core.Services.MonitorService,Cloud.Core.IBlobStorage,Cloud.Core.NotificationHub.AppSettings,Cloud.Core.IUrlShortener)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.NotificationHub.HostedServices.SmsService" /> class.
            </summary>
            <param name="smsProviders">The SMS providers.</param>
            <param name="messengers">The messengers.</param>
            <param name="telemetryLogger">The telemetry logger.</param>
            <param name="logger">The logger.</param>
            <param name="monitor">The monitor.</param>
            <param name="blobStorage">The BLOB storage.</param>
            <param name="settings">The settings.</param>
            <param name="urlShortener">The URL shortener.</param>
        </member>
        <member name="M:Cloud.Core.NotificationHub.HostedServices.SmsService.LogBackgroundMetric(System.TimeSpan)">
            <summary>Logs the background metric.</summary>
            <param name="elapsed">The elapsed.</param>
        </member>
        <member name="M:Cloud.Core.NotificationHub.HostedServices.SmsService.StartAsync(System.Threading.CancellationToken)">
            <summary>start as an asynchronous operation.</summary>
            <param name="cancellationToken">Indicates that the start process has been aborted.</param>
        </member>
        <member name="M:Cloud.Core.NotificationHub.HostedServices.SmsService.StopAsync(System.Threading.CancellationToken)">
            <summary>Triggered when the application host is performing a graceful shutdown.</summary>
            <param name="cancellationToken">Indicates that the shutdown process should no longer be graceful.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Cloud.Core.NotificationHub.Models.DTO.CreateEmail">
            <summary>Create Email.</summary>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Models.DTO.CreateEmail.Provider">
            <summary>Gets or sets the email provider to use while sending.</summary>
            <example>EmailProviders.SmtpProvider</example>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Models.DTO.CreateEmail.To">
            <summary>Recipient list for the email (sent as blind carbon copy).</summary>
            <example>
            - robert.mccabe@outlook.com
            </example>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Models.DTO.CreateEmail.Subject">
            <summary>Subject for the email being sent.</summary>
            <example>Test subject</example>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Models.DTO.CreateEmail.TemplateName">
            <summary>Gets or sets the name of the email template to use.</summary>
            <example>Lev_SalesInvoice_en</example>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Models.DTO.CreateEmail.Content">
            <summary>Gets or sets the email content.</summary>
            <example><h1>This is an example email!</h1></example>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Models.DTO.CreateEmail.IsPlainText">
            <summary>Indicate whether the email is plain text only. <c>True</c> if this instance is plain text; otherwise, <c>false</c>.</summary>
            <example>true</example>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Models.DTO.CreateEmail.Attachments">
            <summary>The email attachments.</summary>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Models.DTO.CreateEmail.op_Implicit(Cloud.Core.NotificationHub.Models.DTO.CreateEmail)~Cloud.Core.EmailMessage">
            <summary>
            Performs an implicit conversion from <see cref="T:Cloud.Core.NotificationHub.Models.DTO.CreateEmail"/> to <see cref="T:Cloud.Core.EmailMessage"/>.
            </summary>
            <param name="source">The source.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Cloud.Core.NotificationHub.Models.DTO.CreatePush">
            <summary>Create push event.</summary>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Models.DTO.CreatePush.EventName">
            <summary>Event name to push for the subscribers.</summary>
            <example>LoginEvent</example>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Models.DTO.CreatePush.Title">
            <summary>Push notification title.</summary>
            <example>New Login!</example>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Models.DTO.CreatePush.Body">
            <summary>Push notification body to display.</summary>
            <example>You have logged in from another device.</example>
        </member>
        <member name="T:Cloud.Core.NotificationHub.Models.DTO.CreateSms">
            <summary>Create Sms message.</summary>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Models.DTO.CreateSms.Provider">
            <summary>Sms provider to use while sending.</summary>
            <example>SmsProviders.ClickatelProvider</example>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Models.DTO.CreateSms.To">
            <summary>Recipient list of phone numbers, with area codes.</summary>
            <example>
            +447398225155
            </example>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Models.DTO.CreateSms.Text">
            <summary>Sms message text to send.</summary>
            <example>This is an example sms message.</example>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Models.DTO.CreateSms.Attachments">
            <summary>List of attachment id's to use when generating the message.</summary>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Models.DTO.CreateSms.op_Implicit(Cloud.Core.NotificationHub.Models.DTO.CreateSms)~Cloud.Core.SmsMessage">
            <summary>
            Performs an implicit conversion from <see cref="T:Cloud.Core.NotificationHub.Models.DTO.CreateSms"/> to <see cref="T:Cloud.Core.SmsMessage"/>.
            </summary>
            <param name="source">The source.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Cloud.Core.NotificationHub.Models.EmailProviders">
            <summary>Email provider enumeration.</summary>
        </member>
        <member name="F:Cloud.Core.NotificationHub.Models.EmailProviders.SmtpProvider">
            <summary>The SMTP relay provider.</summary>
        </member>
        <member name="F:Cloud.Core.NotificationHub.Models.EmailProviders.SendgridProvider">
            <summary>Sendgrid provider.</summary>
        </member>
        <member name="F:Cloud.Core.NotificationHub.Models.EmailProviders.DummyEmailProvider">
            <summary>Dummy email provider for testing.</summary>
        </member>
        <member name="T:Cloud.Core.NotificationHub.Models.SmsProviders">
            <summary>Sms provider enumeration.</summary>
        </member>
        <member name="F:Cloud.Core.NotificationHub.Models.SmsProviders.ClickatelProvider">
            <summary>Clickatel provider.</summary>
        </member>
        <member name="F:Cloud.Core.NotificationHub.Models.SmsProviders.SendgridProvider">
            <summary>Sendgrid provider.</summary>
        </member>
        <member name="F:Cloud.Core.NotificationHub.Models.SmsProviders.TextlocalProvider">
            <summary>Textlocal provider.</summary>
        </member>
        <member name="F:Cloud.Core.NotificationHub.Models.SmsProviders.DummySmsProvider">
            <summary>Dummy sms provider for testing.</summary>
        </member>
        <member name="T:Cloud.Core.NotificationHub.Program">
            <summary> Main application class.</summary>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Program.Main(System.String[])">
            <summary>Defines the entry point of the application.</summary>
        </member>
        <member name="T:Cloud.Core.NotificationHub.Providers.BitlyConfig">
            <summary>Bit.ly url shortener configuration class.</summary>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Providers.BitlyConfig.ApiKey">
            <summary>The bit.ly API key.</summary>
        </member>
        <member name="T:Cloud.Core.NotificationHub.Providers.BitlyShortenResult">
            <summary>Bitly shorten result.
            Implements the <see cref="T:Cloud.Core.IUrlShortenResult" />
            </summary>
            <seealso cref="T:Cloud.Core.IUrlShortenResult" />
        </member>
        <member name="P:Cloud.Core.NotificationHub.Providers.BitlyShortenResult.SourceLink">
            <summary>Original source link to shorten.</summary>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Providers.BitlyShortenResult.ShortLink">
            <summary>Shortened version of the link.</summary>
        </member>
        <member name="T:Cloud.Core.NotificationHub.Providers.BitlyUrlService">
            <summary>
            Bitly url shortener service.
            Implements the <see cref="T:Cloud.Core.IUrlShortener" />
            </summary>
            <seealso cref="T:Cloud.Core.IUrlShortener" />
        </member>
        <member name="M:Cloud.Core.NotificationHub.Providers.BitlyUrlService.#ctor(Cloud.Core.NotificationHub.Providers.BitlyConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.NotificationHub.Providers.BitlyUrlService"/> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Providers.BitlyUrlService.#ctor(Cloud.Core.NotificationHub.Providers.BitlyConfig,System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.NotificationHub.Providers.BitlyUrlService" /> class.
            </summary>
            <param name="config">The configuration.</param>
            <param name="httpClient">The http client.</param>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Providers.BitlyUrlService.ShortenLink(System.Uri)">
            <summary>Shorten the passed in link.</summary>
            <param name="original">Original link to shorten.</param>
            <returns>Task ILinkShortenResult with the short link.</returns>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Providers.DummyEmailProvider.Name">
            <summary>Gets or sets the name for the implementor of the INamedInstance interface.</summary>
            <value>The name of this instance.</value>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Providers.DummyEmailProvider.Send(Cloud.Core.EmailMessage)">
            <summary>Sends the specified email.</summary>
            <param name="email">The email to send.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Providers.DummyEmailProvider.SendAsync(Cloud.Core.EmailMessage)">
            <summary>Sends the email asynchronously.</summary>
            <param name="email">The email to send.</param>
            <returns>Task.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Cloud.Core.NotificationHub.Providers.DummySmsProvider.Name">
            <summary>Gets or sets the name for the implementor of the INamedInstance interface.</summary>
            <value>The name of this instance.</value>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Providers.DummySmsProvider.Send(Cloud.Core.SmsMessage)">
            <summary>Sends the specified email.</summary>
            <param name="sms">The email to send.</param>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Providers.DummySmsProvider.SendAsync(Cloud.Core.SmsMessage)">
            <summary>Sends the email asynchronously.</summary>
            <param name="sms">The email to send.</param>
            <returns>Task.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Cloud.Core.NotificationHub.Startup">
            <summary>Class Startup.</summary>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{Cloud.Core.NotificationHub.Startup})">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.NotificationHub.Startup"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>This method gets called by the runtime. Use this method to add services to the dependency root.</summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:Cloud.Core.NotificationHub.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>Configures the specified application.</summary>
            <param name="app">The application.</param>
            <param name="env">The env.</param>
        </member>
    </members>
</doc>
